Terraform is a open source infrastructure as a code (IOC) tool used to manage, define infrastrucure for cloud providers.

Terraform workflow
we write the configuration file then install the dependencies by running terraform init command

terraform plan shows execution plan before going to apply

terraform apply command creates the resources in the cloud providers , it also creates the state file to track the resources created

Terraform workspaces
If we want to use the same terraform code for different environment like dev stage prod we can achieve it by using workspaces
Ex: terraform workspace new dev - this will create workspace dev
terraform workspace select dev - this will checkout to dev workspace 

this workspace creation also creates a seperate state file for each workspaces

Terraform state
terraform state file helps to track and manage resources efficiently. It prevents duplication 

Terraform module 
terraformâ€™s Module Registry is a public or private repository of reusable Terraform modules 
that help standardize and simplify infrastructure deployment.
It has a collection of pre built terraform modules
Allows teams to reuse and share infrastructure code instead of writing everything from 
scratch.

Terraform lifecycle
lifecycle allows to handle zero downtime for resources 
 
create_before_destroy allows resources to create first and it will destroy previously created resource

prevent_destroy allows to retrict deletion of that resource

lifecycle {
    create_before_destroy = true
    prevent_destroy       = true
  }



terraform provisioners
3 types
1. file
1. file Provisioner
Copies files or directories from the machine running Terraform to the remote resource.

provisioner "file" {
  source      = "script.sh"
  destination = "/tmp/script.sh"
}

2. remote-exec Provisioner
Runs commands on the remote machine.


provisioner "remote-exec" {
  inline = [
    "sudo apt update",
    "sudo apt install -y nginx"
  ]
}

3. local-exec Provisioner
Runs a command on the machine running Terraform, not on the remote resource.

provisioner "local-exec" {
  command = "echo ${self.public_ip} >> inventory.txt"
}

To configure s3 backend
terraform {
  backend "s3" {
    bucket = "firstbucketshri1"
    key = "path/to/my/terraform.tfstate"
    region = "us-east-1"
  }
}

terraform import 
to import existing infra under terraform statefile
command = terraform import resoucetype.resourcename instance id or bucket name
to import a resouce block should be present with the resource name later we can fill the info using state file

terraform state list- to list the state files
